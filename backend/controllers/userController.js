const User = require('../models/user')
const mongoose = require('mongoose')
const nodemailer = require('nodemailer')

const registerUser = async (req, res) => {
    const user = new User(req.body)
    const email = req.body.email

    const userExists = await User.findOne({ email });

    if (userExists) {
        res.status(404);
        throw new Error("User already exists");
    }
    try{
        const token = await user.generateAuthToken()
        const newUser = await user.save(function(err){
        if(err){
            return;
        }});
        res.send({ user, token })
    }catch(e){
        console.log('Error while registering the user')
        res.status(400).send(new Error(e))
    }
}

const loginUser = async (req, res) => {
    try{
        const user = await User.findByCredentials(req.body.email, req.body.password)
        const token = await user.generateAuthToken()
        user.tokens.token = token
        await user.save()
        res.status(200).send({ user, token })
    }catch(err){
        console.log('Error while logging in')
        res.status(404).send(new Error('Invalid Login'))
    }
}

const logoutUser = async (req, res) => {
    try{
        req.user.tokens = req.user.tokens.filter((token) => {
            return token.token !== req.token
        })
        await req.user.save()
        res.status(200).send('Logged out successfully')

    }catch(err){
        console.log('Error while logging out')
        res.status(500)
    }
}

const logoutAll = async (req, res) => {
    try{
        req.user.tokens = []
        await req.user.save()
        res.status(200).send('Logged out of all devices')
    }catch(err){
        console.log('Error while logging out')
        res.status(500)
    }
}

const updateUserProfile = async (req, res) => {
    const updates = Object.keys(req.body)
    const allowedUpdates = ['name', 'email', 'age', 'password', 'pic']
    const isValid = updates.every((update) => allowedUpdates.includes(update))

    if(!isValid){
        return res.status(400).send({error: 'Invalid updates'})
    }

    try{
        //const user = await User.findByIdAndUpdate(_id, req.body, {new : true, runValidators : true})
        //The above method bypasses the middleware used in the application, so normal method has been used below the use the Middleware.

        const user = req.user
        updates.forEach((update) => user[update] = req.body[update])
        await user.save()
        const token = user.tokens[user.tokens.length-1].token;
        res.send({user, token})
    }catch(e){
        console.log('Error while updating the user')
        res.status(500).send(e)
    }
}

const deleteAccount = async (req, res) => {
    try{
        await req.user.remove()
        res.status(201).send(req.body.user)
    }catch(e){
        console.log('Error while deleting the user')
        res.status(500).send(e)
    }
}

const resetPasswordRequest = async (req, res) => {
    try{
        const user = await User.findUserForReset(req.body.email)
        sendPasswordResetMail( user.email, user.name, user._id, user.resetPasswordToken )
        res.send({ user })
    }catch(err){
        console.log('Error while resetting the new password')
        res.status(404).send(new Error('Password reset failed'))
    }
}

const resetPassword = async (req, res) => {
    const resetPasswordToken = req.params.resetToken
    try{
        const user = await User.findOne({resetPasswordToken})

        user.password = req.body.password
        await user.save()
        res.send({user})
    }catch(err){
        res.send(new Error('Error while resetting the new password'))
    }
}

const sendPasswordResetMail = (email, name, id, token) =>{
    
    let transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: "notetaker.mern@gmail.com",
            pass: "Notetaker7!"
        }
    });
    const mailOptions = {
        from: "NoteTaker",
        to: email,
        subject: "Reset Password",
        text: `Hello ${name},`,
        html: 
            `<p>A request has been received to change the password for your NoteTaker account.</p>
             <p>Click on this <a href="${process.env.URL}/reset/${id}/${token}">link to change your password</a></p>
             <p>This mail is autogenerated. Please do not reply to this mail.</p>`
    }

    const mail = transporter.sendMail(mailOptions, (error, info) => {
        if(error){
        }else{
        }
    })
}


module.exports = { registerUser, loginUser, logoutUser, logoutAll, updateUserProfile, deleteAccount, resetPasswordRequest, resetPassword }